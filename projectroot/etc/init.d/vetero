#!/bin/sh
#
# veterod
#

NEWLINE="
"

CONFIGURATION=/data/vetero.config
TEMP_CONFIGURATION=/dev/shm/veterorc
VETERO_SYSWIDE_CONFIG=/etc/veterorc

SITECOPYRC=/dev/shm/sitecopyrc
SITECOPY_DATA=/data/sitecopy
SITECOPY_ARGS="-r $SITECOPYRC -p $SITECOPY_DATA"

VETERO_WWWDATA=/data/vetero-wwwdata
VETEROD_OPTIONS="--error-logfile syslog"
PIDFILE=/var/run/veterod.pid

# default values
VETERO_SERIAL_DEVICE=/dev/ttyUSB0
VETERO_LOCALE=de_DE.utf-8
SITECOPY_PROTOCOL_OPTIONS=

if ! [ -r "$CONFIGURATION" ] ; then
    echo "File '$CONFIGURATION' not found. Don't start veterod."
    exit 1
fi

. "$CONFIGURATION"

init_sitecopy()
{
    echo -n "Init sitecopy configuration... "
    if [ -r "$SITECOPYRC" ] ; then
        echo "(already present)"
        return
    fi

    # add newline
    if [ -n "$SITECOPY_PROTOCOL_OPTIONS" ] ; then
        SITECOPY_PROTOCOL_OPTIONS="$NEWLINE    $SITECOPY_PROTOCOL_OPTIONS"
    fi

    cat - > "$SITECOPYRC" <<EOF
site vetero $SITECOPY_PROTOCOL_OPTIONS
    server "$SITECOPY_SERVER"
    username "$SITECOPY_USERNAME"
    password "$SITECOPY_PASSWORD"
    remote "$SITECOPY_REMOTE"
    local "$VETERO_WWWDATA"
EOF
    chmod 0600 "$SITECOPYRC"

    echo "done"

    echo -n "Init sitecopy... "
    if [ -d "$SITECOPY_DATA" ] ; then
        echo "(already present)"
        return
    fi

    echo ""

    mkdir "$SITECOPY_DATA"

    echo "Fetching remote data ..."
    sitecopy $SITECOPY_ARGS -f vetero

    echo "Synchronize remote data ..."
    sitecopy $SITECOPY_ARGS -s vetero
}

generate_configuration()
{
    if ! [ -d "$VETERO_WWWDATA" ] ; then
        echo -n "Generating '$VETERO_WWWDATA' directory ..."
        mkdir "$VETERO_WWWDATA"
        echo "done"
    fi

    echo -n "Generating configuration file... "
    if [ -r "$TEMP_CONFIGURATION" ] ; then
        echo "(already present)"
        return
    fi

    #
    # general options
    #

    echo >>"$TEMP_CONFIGURATION" "serial_device=$VETERO_SERIAL_DEVICE"
    echo >>"$TEMP_CONFIGURATION" "serial_baud=9600"
    echo >>"$TEMP_CONFIGURATION" "database_path=/data/vetero.db"
    echo >>"$TEMP_CONFIGURATION" "report_directory=$VETERO_WWWDATA"
    echo >>"$TEMP_CONFIGURATION" "locale=$VETERO_LOCALE"
    if [ -n "$VETERO_UPDATE_POSTSCRIPT" ] ; then
        echo >>"$TEMP_CONFIGURATION" "update_postscript='$VETERO_UPDATE_POSTSCRIPT'"
    fi
    if [ -n "$VETERO_LOCATION" ] ; then
        echo >>"$TEMP_CONFIGURATION" "location_string='$VETERO_LOCATION'"
    fi
    if [ -n "$VETERO_REPORT_TITLE_COLOR1" ] ; then
        echo >>"$TEMP_CONFIGURATION" "report_title_color1='$VETERO_REPORT_TITLE_COLOR1'"
    fi
    if [ -n "$VETERO_REPORT_TITLE_COLOR2" ] ; then
        echo >>"$TEMP_CONFIGURATION" "report_title_color2='$VETERO_REPORT_TITLE_COLOR2'"
    fi

    #
    # sensor configuration
    #

    if [ -n "$VETERO_SENSOR_TYPE" ] ; then
        echo >>"$TEMP_CONFIGURATION" "sensor_type=$VETERO_SENSOR_TYPE"
    fi
    if [ -n "$VETERO_SENSOR_NUMBER" ] ; then
        echo >>"$TEMP_CONFIGURATION" "sensor_number=$VETERO_SENSOR_NUMBER"
    fi
    if [ -n "$VETERO_PRESSURE_SENSOR_I2C_BUS" ] ; then
        echo >>"$TEMP_CONFIGURATION" "pressure_sensor_i2c_bus=$VETERO_PRESSURE_SENSOR_I2C_BUS"
    fi
    if [ -n "$VETERO_PRESSURE_HEIGHT" ] ; then
        echo >>"$TEMP_CONFIGURATION" "pressure_height=$VETERO_PRESSURE_HEIGHT"
    fi

    # symlink /etc/veterorc and add some reliability to not overwrite custom
    # configurations
    if ! [ -h "$VETERO_SYSWIDE_CONFIG" ] ; then
        if [ -r "$VETERO_SYSWIDE_CONFIG" ] ; then
            mv "$VETERO_SYSWIDE_CONFIG" "${VETERO_SYSWIDE_CONFIG}.orig"
        fi
        ln -s "$TEMP_CONFIGURATION" "$VETERO_SYSWIDE_CONFIG"
    else
        local linktarget=`readlink "$VETERO_SYSWIDE_CONFIG"`
        if [ "$linktarget" != "$TEMP_CONFIGURATION" ] ; then
            rm "$VETERO_SYSWIDE_CONFIG"
            ln -s "$TEMP_CONFIGURATION" "$VETERO_SYSWIDE_CONFIG"
        fi
    fi
    
    #
    # syslog
    #

    if [ -n "$VETERO_DISPLAY_NAME" ] && [ -n "$VETERO_DISPLAY_CONNECTION" ] ; then
        echo >>"$TEMP_CONFIGURATION" "display_name=$VETERO_DISPLAY_NAME"
        echo >>"$TEMP_CONFIGURATION" "display_connection=$VETERO_DISPLAY_CONNECTION"
    fi

    #
    # sitecopy
    #

    need_init_sitecopy=0

    if [ -n "$SITECOPY_SERVER" ] && [ -n "$SITECOPY_USERNAME" ] && \
            [ -n "$SITECOPY_PASSWORD" ] && [ -n "$SITECOPY_REMOTE" ] ; then
        need_init_sitecopy=1
        echo >>"$TEMP_CONFIGURATION" "report_upload_command='/usr/bin/sitecopy $SITECOPY_ARGS -u vetero'"
    fi

    echo "done"

    if [ "$need_init_sitecopy" -eq 1 ] ; then
        init_sitecopy
    fi
}

custom_hostname()
{
    if [ -n "$VETERO_HOSTNAME" ] ; then
        echo "Setting hostname to '$VETERO_HOSTNAME'..."
        hostname "$VETERO_HOSTNAME"
    fi
}

wait_for_device()
{
    local count=0
    local max_wait=10 # seconds

    while ! lsusb | grep -q 'ID 10c4:ea60' && [ "$count" -lt "$max_wait" ] ; do
        sleep 1
        count=$(expr $count + 1)
    done
}

start()
{
    generate_configuration
    custom_hostname
    echo "Waiting for USB device to appear..."
    wait_for_device
    echo "Starting veterod..."
    start-stop-daemon -S -p "$PIDFILE" -x veterod  -- $VETEROD_OPTIONS
}

stop()
{
    echo "Stopping veterod..."
    start-stop-daemon -K -p "$PIDFILE"
}

case $1 in

    start)
        start
        ;;

    stop)
        stop
        ;;

    restart)
        stop
        start
        ;;
esac

# vim: set sw=4 ts=4 et:
